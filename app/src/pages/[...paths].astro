---
import { getCollection } from 'astro:content';
import {markedConfig} from "../../marked.config";
import {Marked} from "marked";
import {mangle} from "marked-mangle";
import {gfmHeadingId} from "marked-gfm-heading-id";
import hljs from 'highlight.js';
import {markedHighlight} from 'marked-highlight';
import DefaultLayout from "../layout/default.astro";
import {CollectionEntry} from "astro:content";

interface Props {
    entry: CollectionEntry<string>
}

export async function getStaticPaths(): Promise<{params: { paths: string }, props: { entry: CollectionEntry<string> }}[]> {
    const pathLists = await getCollection("articles")

    return pathLists.map(entry => {
        return {
            params: {
                paths: entry.slug,
            },
            props: {
                entry
            }
        }
    })
}

const marked = new Marked()

marked.use(markedHighlight({
    langPrefix: 'hljs language-',
    highlight(code: string, lang: string) {
        const language = hljs.getLanguage(lang) ? lang : 'plaintext';
        return hljs.highlight(code, { language }).value;
    }
}));
marked.use(gfmHeadingId())
marked.use(mangle())

const {entry} = Astro.props

const sourceCode = entry.id.includes(".md") ? (
    await marked.parse(entry.body, {async: true, ...markedConfig})
) : entry.body;

// エラーハンドリングの実装

---

<DefaultLayout>
    <article set:html={sourceCode}></article>
    {
        sourceCode.includes("language-") ? <link rel="stylesheet" href="./highlight.css" /> : ""

    }
</DefaultLayout>
