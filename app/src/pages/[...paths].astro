---
import {config} from "../../model/config";
import {getFilePathLists} from "../lib/fs";
import * as fs from "fs";
import {markedConfig} from "../../marked.config";
import {Marked} from "marked";
import {mangle} from "marked-mangle";
import {gfmHeadingId} from "marked-gfm-heading-id";
import hljs from 'highlight.js';
import {markedHighlight} from 'marked-highlight';
import DefaultLayout from "../layout/default.astro";

export async function getStaticPaths(): Promise<{ params: { paths: string } }[]> {
    const articleDir = process.cwd() + '/../' + config.markdown_dir
    const pathLists = getFilePathLists(articleDir, articleDir)

    // .filter(pathList => pathList.some(path => /sample/.test(path))).
    return pathLists.map(pathList => {
        return {
            params: {
                paths: pathList.join("/")
            }
        }
    })
}

const marked = new Marked()

marked.use(markedHighlight({
    langPrefix: 'hljs language-',
    highlight(code: string, lang: string) {
        const language = hljs.getLanguage(lang) ? lang : 'plaintext';
        return hljs.highlight(code, { language }).value;
    }
}));
marked.use(gfmHeadingId())
marked.use(mangle())

const paths = Astro.params.paths.split("/");

// ファイルのあるディレクトリの名前
const dirName = paths.length > 1 ? process.cwd() + '/../' + config.markdown_dir + '/' + paths.slice(0, paths.length - 1).join('/') : process.cwd() + '/../' + config.markdown_dir

// ファイル名
const fileName = fs.existsSync(dirName + '/' + `${paths[paths.length-1]}.md`) ? `${paths[paths.length-1]}.md` : `${paths[paths.length-1]}.html`

const file = fs.readFileSync(dirName + '/' + fileName, 'utf-8')
const sourceCode = fileName.includes(".md") ? (
    await marked.parse(file, {async: true, ...markedConfig})
) : file;

// エラーハンドリングの実装

---

<DefaultLayout>
    <article set:html={sourceCode}></article>
    {
        sourceCode.includes("language-") ? <link rel="stylesheet" href="./highlight.css" /> : ""

    }
</DefaultLayout>
